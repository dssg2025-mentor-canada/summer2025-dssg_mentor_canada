---
title: Descriptive Data Statistics
format: 
    html:
        toc: true
        embed-resources: true
        warning: false
---

## Python: Data Cleaning & Feature Engineering

### Library imports
```{r}
#| output: false
library(reticulate)
use_condaenv("dssg_env", required = TRUE)
py_config()
```

```{python}
#| output: false
import pandas as pd
import os
from siuba import _, group_by, summarize, filter, select, mutate, arrange, count
import matplotlib.pyplot as plt
```

### Data Import

```{python}
youth = pd.read_csv('../../dssg-2025-mentor-canada/Data/Data_2020-Youth-Survey.csv')
```

### Preview the first 6 rows and 7 columns.

```{python}
youth.iloc[:6,:8]
```

```{python}
#| warning: false
#| output: asis
youth.info()
```

```{python}
print(youth.shape)

null_counts = youth.isnull().sum()
null_counts = null_counts[null_counts > 0]
```

```{python}
null_counts = null_counts.reset_index()
null_counts
```

### Reversing one-hot encoding for the gender identity column:

```{python}
gender_cols = youth.loc[:,'QS1_9_GENDER1_1_1':'QS1_9_GENDER1_6_6']
youth['QS1_9_gender'] = gender_cols.idxmax(axis = 1)
youth['QS1_9_gender'].head().reset_index()
```

> QS1_28_EMPLOYMENT_calculated, gender_cols

### Create estimated total year income column:

> (Feature engineering)

```{python}
youth['yearly_from_month'] = youth['Month_income'].fillna(0) * 12
youth['yearly_from_seimimonth'] = youth['Semimonth_income'].fillna(0) * 24
youth['yearly_from_biweek'] = youth['Biweek_income'].fillna(0)*26
youth['yearly_from_week'] = youth['Week_income'].fillna(0) * 52

youth['total_yearly_income'] = (youth['yearly_from_month'] +
                                youth['yearly_from_seimimonth'] + 
                                youth['yearly_from_biweek'] + 
                                youth['yearly_from_week'])

```

#### Preview new `total_yearly_income` column:

```{python}
(youth['total_yearly_income']).head()
```

#### Save manipulated dataset to local as an intermediate processed dataset:

```{python}
youth.to_csv('../../dssg-2025-mentor-canada/Data/intermediate.csv')
```

## R: Visualization

```{r}
#| warning: false
library(tidyverse)
library(knitr)
library(reticulate)
```

```{r}
#| warning: false
youth <- read_csv('../../dssg-2025-mentor-canada/Data/intermediate.csv')
kable(head(youth))
```

### **Histograms to examine distributions**:

#### Total estimated yearly income:

```{r}
ggplot(youth, aes(x = total_yearly_income)) +
    geom_histogram() +
    scale_y_log10() +
    labs(title = "Distribution of total estimated yearly income",
    x = "Estimate Total Yearly Income ($)") +
    theme_minimal()
```

#### Frequency count of each gender identity (`QS1_9_gender`):

```{r}
ggplot(youth, aes(x = QS1_9_gender, fill = QS1_9_gender)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### Compare gender identity to estimated yearly total income (`total_yearly_income`):

```{r}
ggplot(youth, aes(x = QS1_9_gender, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_bar(stat = "identity") +
    labs(x = "Gender Indentity", y = "Total estimated yearly income ($)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(youth, aes(x = QS1_9_gender, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_boxplot() +
    labs(x = "Gender Indentity", y = "Total estimated yearly income ($)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
youth |>
filter(total_yearly_income < 29380) |>
ggplot( aes(x = QS1_9_gender, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(x = "Gender Indentity", y = "Total estimated yearly income ($)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
youth |>
filter(total_yearly_income < 29380) |>
ggplot( aes(x = QS1_9_gender, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_bar(stat = "identity", position = "stack") +
    labs(x = "Gender Indentity", y = "Total estimated yearly income ($)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### Comparing further education (`QS1_21_FURTHEDUCA`) and current income:

```{r}
ggplot(youth, aes(x = QS1_21_FURTHEDUCA, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_boxplot(outliers = FALSE) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

> #### Remove outlier in `no` group by removing the observations with `total_yearly_income` \$29,380, the low-income for an individual person in 2024 in canada.

```{r}
youth |>
filter(total_yearly_income < 29380) |>
ggplot(aes(x = QS1_21_FURTHEDUCA, y = total_yearly_income, fill = QS1_9_gender)) +
    geom_bar(stat = "identity", position = "dodge") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### Visualize Mental health outcome `QS4_9_MENTALHEALTH` (or `QS4_9_MENTALHEALTH_cat`) / `QS4_11_BELONGING` depending on early mentee experience (`QS2_3_PRESENCEOFM_cat` or `QS2_3_PRESENCEOFM`)

```{r}
youth |>
    filter(!is.na(QS4_9_MENTALHEALTH_cat)) |>
    drop_na(QS2_3_PRESENCEOFM_cat) |>
    ggplot(aes(x = QS2_3_PRESENCEOFM_cat, fill = QS4_9_MENTALHEALTH_cat)) +
    geom_bar(position = "dodge") +
    labs(x = "Early life mentor experience (age 6-11 years old)", fill = "Current Mental Health Rating")
```

```{r}
youth |>
    filter(!is.na(QS4_9_MENTALHEALTH_cat)) |>
    drop_na(QS2_3_PRESENCEOFM_cat) |>
    ggplot(aes(x = QS2_3_PRESENCEOFM_cat, fill = QS4_9_MENTALHEALTH_cat)) +
    geom_bar(position = "fill") +
    labs(x = "Early life mentor experience (age 6-11 years old)", fill = "Current Mental Health Rating")
```

## Python: Visualization

####  Remove unesscary columns and indicate text columns
```{python}
df_dropped = youth.iloc[:, 41:]

# drop logic and validation columns
df_dropped = df_dropped.drop(columns=['QAge_Validation', 'Logic_QS1_6_Qtext', 'Logic_Qtext', 'QS1_8_Validation', 'Logic_QS1_26_Ask', 'QS1_29_Validation', 
                              'QS1_30_MValidatio', 'QS1_30_SMValidati', 'QS1_31_BWValidati', 'QS1_32_WValidatio', 'QS2_10_Validation', 'Logic_QS2_14_Ask','Logic_MENTORID1_1_1',
                              'Logic_MENTORID1_2_2', 'Logic_MENTORID1_3_3', 'Logic_AP_QS2_23', 'Logic_QS2_27_Ask', 'Logic_QS2_34_Valid', 'Logic_QS2_35_Ask', 'Logic_QS2_35_Mask1_1_1',
                              'Logic_QS2_35_Mask1_2_2', 'Logic_QS2_35_Mask1_3_3', 'Logic_QS2_35_Mask1_4_4', 'Logic_QS2_35_Mask1_5_5', 'Logic_QS2_35_Mask1_6_6', 'Logic_QS2_35_Mask1_7_7',
                              'Logic_QS2_35_Mask1_8_8', 'Logic_QS2_35_Mask1_9_9', 'Logic_QS2_35_Mask1_10_10', 'QS4_14_Validatio', 'QS4_15_Validatio', 'QS4_19_Validatio', 'QS4_23_Validatio'
    
                              ])

text_columns = ['QS1_6_Other', 'QS1_9_Other', 'QS1_11_Other', 'QS1_16_Other', 'QS1_18_Other_1', 'QS1_18_Other_2', 'QS1_18_Other_3', 'QS1_18_Other_4', 'QS1_18_Other_5', 'QS1_18_Other_6', 'QS1_18_Other_7', 'QS1_18_Other_8', 'QS1_18_Other_9', 'QS1_18_Other_10', 
                'QS1_18_Other_11', 'QS1_22_Other', 'QS1_26_Other', 'QS1_27_Other', 'QS2_13_Other', 'QS2_14_MENTORID', 'QS2_14_MENTORID_2', 'QS2_14_MENTORID_3', 'QS2_18_LOCATION_1_O', 'QS2_15_RELATIONSHIP2', 'QS2_17_TYPE_2_Other', 'QS2_18_LOCATION_2_O', 'QS2_15_RELATIONSHIP3',
                'QS2_17_TYPE_3_Other', 'QS2_18_LOCATION_3_O', 'QS2_25_YOUTHINIT2', 'QS2_27_MENTORPROGRA2', 'QS2_33_TRANSITIONS_Ot', 'QS2_34_SUPPORTS_Ot', 'QS2_38_NETGATIVEMENTO', 'QS3_2_TRANSITIONWITHOUTMEN', 'QS3_3_TRANSITIONSWITHOUTMENTO', 'QS4_4_Other', 'QS4_5_SATEDU_Other']

                
```

#### Plot a histogram of age
```{python}
df_dropped['QS1_1_AGE'].plot.hist(bins=10, edgecolor='black')

plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Histogram of Age')

plt.show()
```

#### Table of observations for each province/territory
```{python}
province_counts = df_dropped['QS1_2_PROV'].value_counts()
print(province_counts)
```

#### Employment counts for indigenous status
```{python}
youth['QS1_25_EMPLOYMENT_abrivated'] = youth['QS1_25_EMPLOYMENT'].replace({
    'Working (paid work for at least 1 hr/week)': 'Working',
    'Studying or in education/training': 'Studying',
    'Neither of the above': 'Neither',
    'Both': 'Both'
})

youth['QS1_4_INDIGENOUS_abrivated'] = youth['QS1_4_INDIGENOUS'].replace({
    "I don't identify as a member of these communities": 'Non-Indigenous',
    'First Nations (North American Indian)': 'First Nations',
    'Prefer not to say': 'Prefer not to say',
    'Unsure': 'Unsure',
    'Métis': 'Métis',
    'Inuk (Inuit)': 'Inuk'
})

table = pd.crosstab(youth['QS1_4_INDIGENOUS_abrivated'], youth['QS1_25_EMPLOYMENT_abrivated'])
print(table)
```

#### Presence of mentors in early life and adolescence

```{python}
presence_of_ment_611 = df_dropped['QS2_3_PRESENCEOFM'].value_counts()
presence_of_ment_1218 = df_dropped['QS2_9_PRESENCEOFA'].value_counts()

print("Presence of Mentor (ages 6-11) (QS2_3_PRESENCEOFM):")
print(presence_of_ment_611)

print("Presence of Mentor (ages 12-18) (QS2_3_PRESENCEOFM):")
print(presence_of_ment_1218)
```